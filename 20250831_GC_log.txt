# MCP(Model Context Protocol) 학습 프로젝트 로그
날짜: 2025년 8월 31일

## 프로젝트 목적
Model Context Protocol(MCP)의 기본 개념을 이해하고 실제 구현을 통해 학습하기 위한 프로젝트입니다.
MCP는 AI 모델과 애플리케이션 간의 상호작용을 위한 표준 프로토콜입니다.

## 프로젝트 초기 설정
1. 기본 프로젝트 구조 생성
   - src 폴더 생성
   - package.json 설정
   - tsconfig.json 설정

2. 기본 MCP 서버 구현 (src/index.ts)
   - Server, Implementation, StdioServerTransport, ServerCapabilities, Tool 클래스 사용
   - 'add' 도구 구현 (두 숫자를 더하는 기능)
   - 서버 설정 및 도구 등록
   - stdio 통신 설정

3. MCP 클라이언트 구현 (src/client.ts)
   - Client, StdioClientTransport 클래스 사용
   - 서버 연결 및 'add' 도구 호출 구현
   - 에러 처리 및 연결 종료 로직 구현

## 오늘 진행한 작업 상세 내역

1. 프로젝트 초기 구조 설정
   ```
   MCP_Basic_GitHubCopilot/
   ├── src/
   │   ├── index.ts    # MCP 서버 구현
   │   └── client.ts   # MCP 클라이언트 구현
   ├── package.json    # 프로젝트 설정
   └── tsconfig.json   # TypeScript 설정
   ```

2. MCP 서버 구현 (index.ts)
   - MCP 서버의 핵심 컴포넌트 구현:
     - Server: MCP 서버의 기본 클래스
     - Implementation: 서버 구현체 정보 정의 (이름: 'basic-calculator', 버전: '1.0.0')
     - ServerCapabilities: 서버 기능 정의 (tools.listChanged 활성화)
     - StdioServerTransport: 표준 입출력 통신 설정
   - 'add' 도구 구현:
     - 입력: 두 개의 숫자 (a, b)
     - 출력: 두 숫자의 합 (result)
     - JSON Schema를 통한 입력 파라미터 검증

3. MCP 클라이언트 구현 (client.ts)
   - Client 클래스를 사용한 기본 클라이언트 구현
   - StdioClientTransport를 통한 서버 통신 설정
   - 에러 처리 및 연결 관리 로직 구현
   - 테스트용 덧셈 연산 (5 + 3) 구현

## 현재 상태 및 문제점

1. 환경 설정 문제
   - @modelcontextprotocol/typescript-sdk 패키지가 npm에 등록되어 있지 않음
   - typescript-sdk를 로컬에서 참조하려 했으나 설정에 어려움이 있음
   - tsconfig.json의 paths 설정이 제대로 동작하지 않음

2. 빌드 오류
   - TypeScript 컴파일러가 SDK를 찾지 못함
   - 모듈 해석(module resolution) 문제 발생
   - 암시적 any 타입 경고 발생

3. 미해결 작업
   - SDK 로컬 빌드 및 링크 설정
   - 서버-클라이언트 간 통신 테스트
   - 에러 처리 세부 구현

## 다음 단계 (우선순위 순)
1. SDK 설정 문제 해결
   a. typescript-sdk 디렉토리에서 다음 명령 실행:
      ```powershell
      npm install
      npm run build
      npm link
      ```
   b. 프로젝트 루트 디렉토리에서:
      ```powershell
      npm link @modelcontextprotocol/typescript-sdk
      ```

2. TypeScript 설정 개선
   a. tsconfig.json 파일 검증
   b. 모듈 해석 방식 확인
   c. paths 설정이 제대로 동작하는지 테스트

3. 빌드 및 테스트
   a. TypeScript 컴파일
   b. 서버 실행 테스트
   c. 클라이언트 연결 테스트
   d. 덧셈 기능 동작 확인

4. 코드 개선
   a. 타입 명시적 지정 (any 타입 제거)
   b. 에러 처리 강화
   c. 로깅 추가

5. 추가 기능 구현
   a. 뺄셈, 곱셈, 나눗셈 도구 추가
   b. 입력값 검증 강화
   c. 비동기 작업 처리 예제 추가

## 참고 사항 및 팁
1. 서버 측
   - 기본 MCP 서버 설정
   - 덧셈 도구 구현
   - stdio 통신 설정

2. 클라이언트 측
   - 서버 연결
   - 도구 호출
   - 결과 처리

## 참고 사항 및 팁

1. 개발 환경
   - OS: Windows
   - Shell: PowerShell v5.1
   - 주요 도구: TypeScript, Node.js
   - IDE: Visual Studio Code

2. 중요 파일 위치
   - MCP 서버: src/index.ts
   - MCP 클라이언트: src/client.ts
   - SDK 예제: typescript-sdk/src/examples/

3. 디버깅 팁
   - 서버 로그는 stderr로 출력 (console.error 사용)
   - 클라이언트-서버 통신은 stdio를 통해 이루어짐
   - TypeScript 컴파일 오류는 모듈 경로 문제일 가능성이 높음

4. 유용한 예제 코드
   - typescript-sdk/src/examples/client/simpleStreamableHttp.ts
   - typescript-sdk/src/examples/server/toolWithSampleServer.ts

5. 문제 해결 방법
   - SDK 모듈 문제: npm link 사용
   - 타입 오류: tsconfig.json의 paths 설정 확인
   - 빌드 실패: outDir과 rootDir 설정 검증

## 향후 학습 방향
1. MCP의 고급 기능 학습
   - 비동기 작업 처리
   - 스트리밍 데이터 처리
   - 상태 관리
   - 보안 및 인증

2. 실용적인 예제 개발
   - 파일 처리 도구
   - API 연동 도구
   - 데이터 변환 도구

3. 테스트 및 품질 관리
   - 단위 테스트 작성
   - 통합 테스트 구현
   - 에러 케이스 처리

## 유용한 리소스
1. typescript-sdk/src/examples/ 디렉토리
2. typescript-sdk/README.md 파일
3. MCP 스펙 문서
4. TypeScript 공식 문서
